# deploy_uni_chain.py
import json
import os
from web3 import Web3

# --- Configuration ---
UNI_CHAIN_RPC_URL = "http://127.0.0.1:8545"  # Default Hardhat node 1 for UNI-Chain
# Assumes this script is in 'deployment_scripts' and 'uni-chain-project' is a sibling directory
HARDHAT_PROJECT_ROOT = "../uni-chain-project/"
UNIVERSITY_REGISTRY_CONTRACT_NAME = "UniversityRegistry"
# Replace with a private key from your Hardhat node (e.g., the first account)
# Ensure this account has ETH on the UNI-Chain for gas
DEPLOYER_PRIVATE_KEY = "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

# --- Helper Functions ---
def load_contract_artifact(contract_name):
    # Path assumes contract .sol file is directly in 'contracts' folder of the Hardhat project
    artifact_path = os.path.join(
        HARDHAT_PROJECT_ROOT,
        "artifacts",
        "contracts",
        f"{contract_name}.sol",
        f"{contract_name}.json"
    )
    if not os.path.exists(artifact_path):
        raise FileNotFoundError(
            f"Artifact not found at {artifact_path}. "
            f"Ensure '{contract_name}.sol' is in '{os.path.join(HARDHAT_PROJECT_ROOT, 'contracts')}' "
            f"and you have compiled your Hardhat project in '{HARDHAT_PROJECT_ROOT}' (e.g., npx hardhat compile)."
        )
    with open(artifact_path, 'r') as f:
        artifact = json.load(f)
    return artifact['abi'], artifact['bytecode']

def deploy_contract(w3, abi, bytecode, private_key, *constructor_args):
    account = w3.eth.account.from_key(private_key)
    w3.eth.default_account = account.address

    Contract = w3.eth.contract(abi=abi, bytecode=bytecode)
    
    constructor_txn = Contract.constructor(*constructor_args).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gasPrice': w3.eth.gas_price
    })
    try:
        gas_estimate = w3.eth.estimate_gas(constructor_txn)
        constructor_txn['gas'] = gas_estimate
    except Exception as e:
        print(f"Gas estimation failed: {e}. Using a default gas limit of 3,000,000.")
        constructor_txn['gas'] = 3000000

    signed_txn = w3.eth.account.sign_transaction(constructor_txn, private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
    print(f"Deploying {Contract.address if hasattr(Contract, 'address') else 'contract'}... TX Hash: {tx_hash.hex()}")
    
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)
    
    if tx_receipt.status == 0:
        raise Exception(f"Transaction failed: {tx_receipt}")
        
    print(f"Contract deployed successfully! Address: {tx_receipt.contractAddress}")
    return tx_receipt.contractAddress

# --- Main Deployment Logic ---
def main():
    print(f"--- Deploying to UNI-Chain ({UNI_CHAIN_RPC_URL}) ---")
    w3_uni = Web3(Web3.HTTPProvider(UNI_CHAIN_RPC_URL))

    if not w3_uni.is_connected():
        print(f"Failed to connect to UNI-Chain RPC at {UNI_CHAIN_RPC_URL}")
        return

    print(f"Connected to UNI-Chain. Chain ID: {w3_uni.eth.chain_id}")
    deployer_account = w3_uni.eth.account.from_key(DEPLOYER_PRIVATE_KEY)
    print(f"Deployer address: {deployer_account.address}")
    print(f"Deployer balance: {w3_uni.from_wei(w3_uni.eth.get_balance(deployer_account.address), 'ether')} ETH")

    # 1. Deploy UniversityRegistry
    print(f"\nDeploying {UNIVERSITY_REGISTRY_CONTRACT_NAME}...")
    uni_reg_abi, uni_reg_bytecode = load_contract_artifact(UNIVERSITY_REGISTRY_CONTRACT_NAME)
    university_registry_address = deploy_contract(w3_uni, uni_reg_abi, uni_reg_bytecode, DEPLOYER_PRIVATE_KEY)
    
    print("\n--- UNI-Chain Deployment Complete ---")
    print(f"Successfully deployed contracts to UNI-Chain ({UNI_CHAIN_RPC_URL}):")
    print(f"  {UNIVERSITY_REGISTRY_CONTRACT_NAME}: {university_registry_address}")
    print("\nACTION REQUIRED: Copy the above address(es) to your 'deployed_addresses.json' file or directly into the main demo script configuration.")

if __name__ == "__main__":
    # This dummy artifact creation is for basic local script testing if Hardhat project isn't fully set up.
    # In a real run, artifacts must be generated by `npx hardhat compile` in the uni-chain-project.
    dummy_artifact_dir = os.path.join(HARDHAT_PROJECT_ROOT, "artifacts", "contracts", f"{UNIVERSITY_REGISTRY_CONTRACT_NAME}.sol")
    dummy_artifact_json = os.path.join(dummy_artifact_dir, f"{UNIVERSITY_REGISTRY_CONTRACT_NAME}.json")
    if not os.path.exists(dummy_artifact_json):
        print(f"Warning: Dummy artifact creation for {UNIVERSITY_REGISTRY_CONTRACT_NAME}. This is for script testing only.")
        os.makedirs(dummy_artifact_dir, exist_ok=True)
        dummy_content = {
            "abi": [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"_universityAddress","type":"address"}],"name":"registerUniversity","outputs":[],"stateMutability":"nonpayable","type":"function"}],
            "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556101df8061003c6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632948893114610030575b600080fd5b61005b600480360381019061005691906100f0565b61005e565b005b600080546040516001600160a01b03808516939216917f259c8935ea790a169a09a00502f53a029b010f009743598a5960f6533512d1209181526020810190506001905092915050565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156100a457600080fd5b5035919050565b6000815190506100b957600080fd5b6001815190506100c457600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156100e957600080fd5b5035919050565b6000813590506100fb57600080fd5b6101b1565b60006000fd5b61010381610090565b82525050565b600060208201905061011e60008301846100fa565b9291505056fea2646970667358221220874371152711239752287043979344268701680202074128200941202212432064736f6c63430008000033"
        }
        with open(dummy_artifact_json, 'w') as f:
            json.dump(dummy_content, f)
    main()

